#!/usr/bin/env bash

#
# The 3-Clause BSD License
#
# Copyright 2024 European Union
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# VARIABLES ###
SW_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/" && pwd)"
SW_NAME=`basename ${0}`
JAVA_EXEC=`which java`
JAVA_VERSION=`${JAVA_EXEC} -version 2>&1 | head -n 1 | awk '{ print $3 }'`
NOHUP_EXEC=`which nohup`
PID_DIR=${SW_HOME}/tmp
PID_FILE=${PID_DIR}/${SW_NAME}.pid


echo $PID_FILE

DEBUG_PORT=9999

# FUNCTIONS ###
function print_help {
  cat <<EOF
Usage: ${GRE}${SW_NAME}${NOR} COMMAND
CISE Generic Adaptor server lifecycle manager (starting, stopping, debugging).
COMMAND
    start       starts the adaptor in a detached shell using nohup command.
    run         starts the adaptor in foreground.
    stop        stops the adaptor running in background.
    restart     restart the adaptor running in background.
    debug-start starts the adaptor in a detached shell launching the application
                in debug mode (port ${DEBUG_PORT}).
    debug-run   starts the adaptor in foreground launching the application
                in debug mode (port ${DEBUG_PORT}).
    status      show the current status the adaptor (started or stopped).
EOF
}

setup_ssl_certificates(){
  # Path to the application.properties file
  properties_file="${SW_HOME}/config/application.properties"
  LOG_FILE="${SW_HOME}/logs/trace.log"
  mkdir -p "${SW_HOME}/logs"
  touch "$LOG_FILE"
  # clean up previous certificates
  # remove autogenerated keystore files
  rm "${SW_HOME}"/config/clientonly* > /dev/null 2>&1
  rm "${SW_HOME}"/config/serveronly* > /dev/null 2>&1

  # Read mTLS properties from application.properties file
  server_alias=$(grep '^adaptor.ssl.server.alias=' "$properties_file" | cut -d'=' -f2)
  client_alias=$(grep '^adaptor.ssl.client.alias=' "$properties_file" | cut -d'=' -f2)
  accept_http=$(grep '^quarkus.http.insecure-requests=' "$properties_file" | cut -d'=' -f2)
  keystore=$(grep '^signature.keystore.filename=' "$properties_file" | cut -d'=' -f2)
  ks_pass=$(grep '^signature.keystore.password=' "$properties_file" | cut -d'=' -f2)

  if [ "$accept_http" == "disabled" ]; then
    echo "HTTPS is enabled. SSL setup..."
    is_url_https || echo "${KO} Warning: HTTPS is enabled but the CISE Node URL is NOT HTTPS"

    echo "Config SSL Server alias is: \"${server_alias}\""
    echo "Config SSL Client alias is: \"${client_alias}\""
    # Print Aliases from jks
    printf '%s' $ks_pass | \
      keytool -v -list -keystore "${SW_HOME}/config/${keystore}" 2>> "${LOG_FILE}" | grep "Alias name:" | sed '1 i\The JKS contains the following aliases:' | sed -e "s/$//" >> "${LOG_FILE}"

    echo "Exporting server cert"
    rm "${SW_HOME}/config/serveronly.${keystore}" > /dev/null 2>> "${LOG_FILE}"
    printf '%s\n%s\n%s' $ks_pass $ks_pass $ks_pass | \
    keytool -importkeystore \
        -srckeystore "${SW_HOME}/config/${keystore}" \
        -destkeystore "${SW_HOME}/config/serveronly.${keystore}" \
        -deststoretype JKS \
        -srcalias $server_alias || \
    { echo -e "\nError in exporting server mTLS certificate. Please check the logs/trace.log file." ; exit 1 ; }

    echo "Exporting client cert"
    rm "${SW_HOME}/config/clientonly.${keystore}" > /dev/null 2>> "${LOG_FILE}"
    printf '%s\n%s\n%s' $ks_pass $ks_pass $ks_pass | \
    keytool -importkeystore \
        -srckeystore "${SW_HOME}/config/${keystore}" \
        -destkeystore "${SW_HOME}/config/clientonly.${keystore}" \
        -deststoretype JKS \
        -srcalias $client_alias || \
    { echo -e "\nError in exporting client mTLS certificate. Please check the logs/trace.log file." ; exit 1 ; }

  else
    ! is_url_https || echo "${KO} Warning: HTTPS is disabled but the CISE Node URL is HTTPS"
    echo "${KO} Misconfiguration of the Generic Adaptor because HTTP is enabled. Please revisit application.properties and set the quarkus.http.insecure-requests property to disabled and retry"
    exit 1
  fi
}

is_url_https(){
  protocol=$(grep '^adaptor.cise-node-api.address=' "$properties_file" | cut -d'=' -f2 | cut -d':' -f1)
  [ "$protocol" == "https" ]
}

function enable_colors_if_supported {

  if test -t 1; then
    # see if it supports colors...
    NCOLOR=$(tput colors)

    if test -n "$NCOLOR" && test $NCOLOR -ge 8; then
      NOR="$(tput sgr0)"
      RED="$(tput setaf 196)"
      GRE="$(tput setaf 40)"
    fi
  fi

  OK="[${GRE}ok${NOR}]"
  KO="[${RED}ko${NOR}]"

}

function log_exit_msg {
  E=${1:-$?}
test ${E} -eq 0 && echo "${OK} ${SW_NAME} started at `date -Iseconds`" || \
    echo "${KO} ${SW_NAME} not started. Please, inspect the logs in ${GRE}logs/trace.log${NOR} to find the reason."; exit ${E}
}

function log_start_msg {

  echo "${NOR}== ${GRE}CISE GENERIC ADAPTOR${NOR} ====================================="
  echo "Java path:    ${JAVA_EXEC}"
  echo "Java version: ${JAVA_VERSION}"
  echo "================================================="
}

function log_debug_start_msg {
  log_start_msg
  echo "DEBUG is ON listening on port ${DEBUG_PORT}"
  echo "the server is now waiting for a connection from a java remote"
  echo "debugger to the port ${DEBUG_PORT}"
}

function setup_debug {
  export JAVA_OPTS="-Xdebug -agentlib:jdwp=transport=dt_socket,address=${DEBUG_PORT},server=y,suspend=y"
}

function start {
  ${NOHUP_EXEC} ${SW_RUN_SWR_CMD} >> /dev/null 2>&1 &
  local PID=$!
  sleep 5
  kill -0 ${PID} 2> /dev/null
  local IT_EXISTS=$?
  [ $IT_EXISTS -ne 0 ] && log_exit_msg 1

  echo ${PID} >${PID_FILE}
  log_exit_msg 0

}

function run() {
  ${SW_RUN_SWR_CMD} 2>&1
}

function sw_run_cmd() {

  # fix for java version 11 and above where XPath limit has been introduced
  JAVA_OPTS="${JAVA_OPTS} -Djdk.xml.xpathExprGrpLimit=0 -Djdk.xml.xpathExprOpLimit=0 -Djdk.xml.xpathTotalOpLimit=0"

  if [ -z "$JAVA_EXEC" ]; then 
     echo "${KO} ${SW_NAME} not started. The java executable is not in PATH."; exit ${E}
  fi

  if [ "$JAVA_VERSION" == "1.9" ]; then
    JAVA_OPTS="${JAVA_OPTS} --add-modules java.xml.bind"
  fi

  SW_RUN_SWR_CMD="${JAVA_EXEC} ${JAVA_OPTS} -Dconf.dir=${SW_HOME}/config/ -Dpf4j.pluginsDir=plugins -jar ${SW_HOME}/quarkus-run.jar"

}



function get_pid() {
  local PID=$(cat ${PID_FILE} 2>/dev/null)
  echo ${PID:-0}
}

function _status() {
  PID=$(get_pid)
  test $PID -eq 0 && \
  echo "${KO} ${SW_NAME} is stopped (the tmp/generic-adaptor.pid file is not present but the process could be still running)" || echo "${OK} ${SW_NAME} is running"
}

function _stop() {
  PID=$(get_pid)
  (test ${PID} -ne 0 && kill -15 "${PID}" 2>&1) > /dev/null && \
	  (echo "${OK} ${SW_NAME} has been stopped" && rm -f "${PID_FILE}" ) \
	  || echo "${KO} ${SW_NAME} was not running (or the tmp/generic-adaptor.pid file is not present but the process could be still running)"
}

# MAIN ###
enable_colors_if_supported

cd ${SW_HOME}
PREFIX_CMD=""
POSTFIX_CMD=""
COUNT_VAR=0
for var in "$@"
 do
  if [[ $var == -Ddw.* ]]
  then
    PREFIX_CMD="$PREFIX_CMD $var"
  else
    POSTFIX_CMD="$POSTFIX_CMD $var"
  fi
done

sw_run_cmd

setup_ssl_certificates

case $1 in
start)
  log_start_msg
  start
  exit 0
  ;;
run)
  log_start_msg
  run
  exit 0
  ;;
debug-start)
  setup_debug
  log_debug_start_msg
  sw_run_cmd
  start
  exit 0
  ;;
debug-run)
  setup_debug
  log_debug_start_msg
  sw_run_cmd
  run
  exit 0
  ;;
stop)
  _stop
  ;;
restart)
  $0 stop
  sleep 1
  $0 start
  ;;
status)
  _status
  ;;
*)
  print_help
  exit 0
  ;;
esac

exit 0
