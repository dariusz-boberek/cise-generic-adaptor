package eu.cise.adaptor.core.servicehandler.domain.message.utils;

import eu.cise.adaptor.core.servicehandler.domain.context.MessageDataContext;
import eu.cise.servicemodel.v1.message.Message;
import eu.cise.servicemodel.v1.message.ReliabilityProfile;
import eu.eucise.helpers.MessageBuilder;
import eu.eucise.helpers.PullRequestBuilder;
import eu.eucise.helpers.PushBuilder;

import java.util.Date;
import java.util.UUID;

/**
 * This class holds methods used in CISE Message Building phase
 */
public class MessageBuildingCommonUtils {

    private MessageBuildingCommonUtils() {}

    /**
     * This method adds some common attributes with default values to the CISE Message generated by the builder provided:<br>
     * messageId - set to random UUID <br>
     * correlationId - set to random UUID <br>
     * contextId - set to random UUID<br>
     * creationDateTime - set to now<br>
     * priority - set to HIGH<br>
     * requiresAck - set to True
     *
     * @param msgCtx MessageDataContext instance with all the information to build the message
     * @param builder The builder that will generate the CISE Message
     */
    public static void addCommon(MessageDataContext msgCtx, MessageBuilder<?, ?> builder) {
        String messageId = UUID.randomUUID().toString();
        Message refMessage = msgCtx.getReferenceMessage();
        String correlationId = refMessage != null ? refMessage.getCorrelationID() : messageId;
        String contextId = msgCtx.getContextId() == null && refMessage != null ? refMessage.getContextID() : msgCtx.getContextId();

        builder
                .id(messageId)
                .correlationId(correlationId)
                .contextId(contextId)
                .creationDateTime(new Date())
                .priority(msgCtx.getPriority())
                .isRequiresAck(msgCtx.getRequiresAck());
    }

    /**
     * This method adds the LOW_RELIABILITY as ReliabilityProfile to the CISE Message generated by the builder provided
     *
     * @param msgCtx MessageDataContext instance with all the information to build the message
     * @param builder the builder that will generate the CISE Message
     */
    public static void addReliability(MessageDataContext msgCtx, MessageBuilder<?, ?> builder) {
        var reliabilityProfile = new ReliabilityProfile();
        reliabilityProfile.setRetryStrategy(msgCtx.getRetryStrategy());
        builder.reliability(reliabilityProfile);
    }

    /**
     * This method adds the DiscoveryProfiles to the CISE PUSH Message generated by the builder provided
     *
     * @param msgCtx MessageDataContext instance with all the information to build the message
     * @param builder the builder that will generate the CISE Message
     */
    public static void addDiscoveryProfiles(MessageDataContext msgCtx, PushBuilder builder) {
        builder.addProfiles(msgCtx.getDiscoveryProfiles());
    }

    /**
     * This method adds the DiscoveryProfiles to the CISE PullRequest Message generated by the builder provided
     *
     * @param msgCtx MessageDataContext instance with all the information to build the message
     * @param builder the builder that will generate the CISE Message
     */
    public static void addDiscoveryProfiles(MessageDataContext msgCtx, PullRequestBuilder builder) {
        builder.addProfiles(msgCtx.getDiscoveryProfiles());
    }
}
